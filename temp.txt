战斗力（BP）计算：
HP/10 + SP/20 + ATK/2 + DEF/5 + SPD/2 + （6-灵根数量）*等级加值 + 技能加值

maxHP计算： 10+level * 4.75 * 境界加成 + 物品升级效果
maxSP计算： 5+level * 1.5 * 境界加成 + 物品升级效果 

ATK : 5 + 等级加成（每级+0.5，每10级*1.25） + 装备加成 
DEF : 5 + 等级加成（每级+0.5，每10级*1.25） + 装备加成 
SPD ：5 + 等级加成（每级+0.5，每10级*1.25） + 装备加成

修炼经验获得： 随机 5-30 * (1+level/10) * 灵根加成

天灵根 2
单灵根 1.5
双灵根 1.25
三灵根 1
四灵根 0.8
杂灵根 0.6

      单灵根  双灵根  三灵根 四灵根 杂灵根
属性  +110%  | +50% | +30% | +20% | +10%
生活  +80%   | +120%| +100%| +60% | +50%

天灵根效果：灵根加成*1.5
灵根主效果：100%，副效果40%，次效果15%

金 融合、巩固、闪电、磁场　　+防　+速　＋攻　＋炼器　+挖矿
木 生命、活性、生长、韧性　　+SP　+HP　＋防　＋种植　+炼丹
水 流动、变化、转化、转变　　+速　+SP　＋速　＋探索　+种植
火 温度、能量、破坏、消耗　　+攻　+攻　＋SP　＋炼丹　+探索
土 根基、重心、质量、繁衍　　+HP　+防　＋HP　＋挖矿　+炼器

  let result = {
    HP:
      (chara.includes("土") ? buff : 0) +
      (chara.includes("木") ? buff * 0.4 : 0)+
      (chara.includes("土") ? buff * 0.15 : 0),
    SP:
      (chara.includes("木") ? buff : 0) +
      (chara.includes("水") ? buff * 0.4 : 0)+
      (chara.includes("火") ? buff * 0.15 : 0),

    ATK:
      (chara.includes("火") ? buff : 0) +
      (chara.includes("火") ? buff * 0.4 : 0)+
      (chara.includes("金") ? buff * 0.15 : 0),
    DEF:
      (chara.includes("金") ? buff : 0) +
      (chara.includes("土") ? buff * 0.4 : 0)+
      (chara.includes("水") ? buff * 0.15 : 0),
    SPD:
      (chara.includes("水") ? buff : 0) +
      (chara.includes("金") ? buff * 0.4 : 0)+
      (chara.includes("木") ? buff * 0.15 : 0),
    
    mine:
      (chara.includes("土") ? sbuff : 0) +
      (chara.includes("金") ? sbuff * 0.8 : 0),
    medicine:
      (chara.includes("火") ? sbuff : 0) +
      (chara.includes("木") ? sbuff * 0.8 : 0),
    plant:
      (chara.includes("木") ? sbuff : 0) +
      (chara.includes("水") ? sbuff * 0.8 : 0),
    search:
      (chara.includes("水") ? sbuff : 0) +
      (chara.includes("火") ? sbuff * 0.8 : 0),
    smith:
      (chara.includes("金") ? sbuff : 0) +
      (chara.includes("土") ? sbuff * 0.8 : 0),
  };

//主动技，action是 SkillFun[n]里代入的function名。
//被动会计入平时的属性中。 主动不会计入平时属性，只有使用技能时才计入。所有主动技能都会消耗SP。 主动技能中，分 攻击、防御、特殊、治疗 四种技能。
//治疗技能平时也可以用。
//每日可以使用指令：.休养生息 来进行恢复HP、SP、AP。一天只能使用一次。 用了休养生息后，当天再也无法出门历练以及进行PK。

data.flag = {
	upgrade: object {}  属性提升记录
	breakbuff: boolean  突破提升，突破成功时清零。
	stats : str 当前状态。可叠加，在debuff中进行管理。
	debuff : object {}  各debuff的状态记录，包括处理方式。 回合结束时进行统一计算。
	canAct : boolean  能否做出反应。 战斗时统一判定。 石化，冰冻，迷幻，紧固状态都无法动弹。

}

    ctx.command('my-command')
		.option('writer', '-w <id>')
		.option('writer', '--anonymous', { value: 0 })
		.action(({ options }) => JSON.stringify(options))

    ctx.command('setrole <message> [target] [username]','管理指令。可以设置被艾特群员的权限。')
    .action(async ({ session },message, target, username) => {
		let level = {
			owner:5, admin:4, leader:3, high:2, member:1, banned: 0
		}
		let userdata
		let order = await ctx.database.getUser(session.platform, session.userId)

		if(session.userId !== '1794362968' || (session.userId !== '1794362968' && order.authority < 4) ){
			return '没有权限。'
		}
		else{
			const parsedTarget = target ? s.parse(target)[0] : null

			console.log(message,username,parsedTarget)

			if(parsedTarget){
				userdata = await ctx.database.getUser(session.platform, parsedTarget.data.id);

				console.log('\nbefore:',userdata);

				userdata['authority'] = level[message];
				if(username) userdata['name'] = username;
				if(!userdata.name) userdata['name'] = "";

				console.log('\nafter:',userdata);

				await ctx.database.setUser(session.platform, parsedTarget.data.id, userdata);

				userdata = await ctx.database.getUser(session.platform, parsedTarget.data.id);
			}
			else{
				userdata = order;
				userdata['authority'] = level[message];
				if(username) userdata['name'] = username;
				if(!userdata.name) userdata['name'] = "";

				await ctx.database.setUser(session.platform, session.userId, userdata)
				userdata = await ctx.database.getUser(session.platform, session.userId);
			}
		
			return JSON.stringify(userdata)			
		}     
    })

    ctx.command('checkdata <message>','debug指令，可以在控制台看到指定类型的数据。')
    .action(async ({ session }, message) => {
		 const data = await ctx.database.get(message,null)
		 console.log(data);
		 return 'please check in the log.'
    })

    ctx.command('editdata <message>', 'debug')
		.action(async ({ session }, message) => {

				let stats = await ctx.database.stats()
				console.log(stats)
				if ( !stats.tables?.keywords ){
						ctx.model.extend("keywords",{
						id:"unsigned",
						name:"string",
						group:"list"
				},{
						autoInc: true
				})
				}
				let data = await ctx.database.get('keywords', { id: 1 })
				console.log(data)

				let data = await ctx.database.get('keywords',{name:'送礼'})
				console.log(data)
				data[0].group.push('送礼')
				await ctx.database.set('keywords', {name:'送礼'} , { group: data[0].group })

				let newdata = await ctx.database.get('keywords', {name:'送礼'})
				console.log(newdata)
		})

    /*ctx.command('cleardata <message>')
    .action(async ({ session },message)=>{
		ctx.database.remove(message,null)
		let data = await ctx.database.get(message,null)
		console.log(data)
		return 'all data is cleared, please check in the log.'
    })
*/
